{"version":3,"sources":["Components/CreateProduct.js","Components/PostListPage.js","App.js","reportWebVitals.js","index.js"],"names":["CreatePostPage","name","setName","useState","price","setPrice","stock","setStock","description","setDescription","navigate","useNavigate","React","createElement","onSubmit","async","e","preventDefault","priceAsNumber","parseFloat","stockAsNumber","parseInt","axios","post","error","console","type","value","onChange","target","required","PostListPage","Product","setProducts","page","setPage","totalPages","setTotalPages","size","useEffect","get","then","response","data","catch","log","map","product","key","id","onClick","handlePreviousPage","prevPage","disabled","handleNextPage","App","Router","Routes","Route","path","element","CreateProduct","Link","to","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.fbd370a8.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom'; // useHistory 대신 useNavigate를 사용합니다.\r\n\r\nconst CreatePostPage = () => {\r\n    const [name, setName] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    const [stock, setStock] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const navigate = useNavigate(); // useNavigate 훅을 사용하여 navigate 함수 생성\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n\r\n            // price를 double로, stock을 int로 변환\r\n            const priceAsNumber = parseFloat(price); // double로 변환\r\n            const stockAsNumber = parseInt(stock, 10); // int로 변환\r\n            await axios.post('/api/posts', { name, price:priceAsNumber, stock:stockAsNumber, description });\r\n            // 작성 후 목록 페이지로 이동 등의 추가 로직 작성\r\n            navigate('/');\r\n        } catch (error) {\r\n            console.error('Error creating post:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <label>\r\n                    Name:\r\n                    <input\r\n                        type=\"text\"\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                        required\r\n                    />\r\n                </label>\r\n            </div>\r\n            <div>\r\n                <label>\r\n                    Price:\r\n                    <input\r\n                        type=\"number\"\r\n                        value={price}\r\n                        onChange={(e) => setPrice(e.target.value)}\r\n                        required\r\n                    />\r\n                </label>\r\n            </div>\r\n            <div>\r\n                <label>\r\n                    Stock:\r\n                    <input\r\n                        type=\"number\"\r\n                        value={stock}\r\n                        onChange={(e) => setStock(e.target.value)}\r\n                        required\r\n                    />\r\n                </label>\r\n            </div>\r\n            <div>\r\n                <label>\r\n                    Description:\r\n                    <textarea\r\n                        value={description}\r\n                        onChange={(e) => setDescription(e.target.value)}\r\n                        required\r\n                    />\r\n                </label>\r\n            </div>\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default CreatePostPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction PostListPage(){\r\n    const [Product, setProducts] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [size] = useState(10); // 한 페이지에 보여줄 제품 수\r\n    useEffect(() => {\r\n        axios.get('/api/posts?page=${page}&size=${size}')\r\n            .then(response =>{\r\n                setProducts(response.data);\r\n                setTotalPages(response.data);\r\n            })\r\n\r\n            .catch(error => console.log(error))\r\n        },[page, size]);\r\n\r\n    const handleNextPage = () => {\r\n        if (page < totalPages - 1) {\r\n            setPage(prevPage => prevPage + 1);\r\n        }\r\n    };\r\n\r\n    const handlePreviousPage = () => {\r\n        if (page > 0) {\r\n            setPage(prevPage => prevPage - 1);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Product</h1>\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th>ID</th>\r\n                    <th>Name</th>\r\n                    <th>Price</th>\r\n                    <th>Stock</th>\r\n                    <th>Description</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {Product.map((product) => (\r\n                    <tr key={product.id}>\r\n                        <td>{product.id}</td>\r\n                        <td>{product.name}</td>\r\n                        <td>{product.price}</td>\r\n                        <td>{product.stock}</td>\r\n                        <td>{product.description}</td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n            <div>\r\n                <button onClick={handlePreviousPage} disabled={page === 0}>\r\n                    Previous\r\n                </button>\r\n                <span> Page {page + 1} of {totalPages} </span>\r\n                <button onClick={handleNextPage} disabled={page === totalPages - 1}>\r\n                    Next\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PostListPage;\r\n","// src/main/frontend/src/App.js\r\n\r\nimport React  from 'react';\r\nimport axios from 'axios';\r\nimport {BrowserRouter as Router, Link, Route, Routes} from 'react-router-dom';\r\nimport CreateProduct from \"./Components/CreateProduct\";\r\nimport New  from \"./Components/new\";\r\nimport RouteTest from \"./Components/RouteTest\";\r\nimport Deeee from \"./Components/deeee\";\r\nimport CreateProduct1 from \"./Components/CreateProduct1\";\r\nimport PostListPage from \"./Components/PostListPage\";\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <Router>\r\n            <Routes>\r\n                <Route path={\"/\"} element={<PostListPage/>}/>\r\n                <Route path={\"/posts\"} element={<CreateProduct/>}/>\r\n            </Routes>\r\n            <br/>\r\n            <Link to={'/posts'}>글작성</Link>\r\n\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}