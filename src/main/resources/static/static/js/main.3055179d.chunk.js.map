{"version":3,"sources":["Components/CreateProduct.js","Components/PostListPage.js","App.js","reportWebVitals.js","index.js"],"names":["CreatePostPage","name","setName","useState","price","setPrice","stock","setStock","description","setDescription","navigate","useNavigate","React","createElement","onSubmit","async","e","preventDefault","priceAsNumber","parseFloat","stockAsNumber","parseInt","axios","post","error","console","type","value","onChange","target","required","PostListPage","Product","setProducts","page","setPage","totalPages","setTotalPages","size","useEffect","get","then","response","data","content","catch","log","map","product","key","id","onClick","handlePreviousPage","disabled","handleNextPage","Array","from","length","_","index","pageNumber","handlePageChange","style","margin","App","Router","Routes","Route","path","element","CreateProduct","Link","to","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.3055179d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom'; // useHistory 대신 useNavigate를 사용합니다.\r\n\r\nconst CreatePostPage = () => {\r\n    const [name, setName] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    const [stock, setStock] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const navigate = useNavigate(); // useNavigate 훅을 사용하여 navigate 함수 생성\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n\r\n            // price를 double로, stock을 int로 변환\r\n            const priceAsNumber = parseFloat(price); // double로 변환\r\n            const stockAsNumber = parseInt(stock, 10); // int로 변환\r\n            await axios.post('/api/posts', { name, price:priceAsNumber, stock:stockAsNumber, description });\r\n            // 작성 후 목록 페이지로 이동 등의 추가 로직 작성\r\n            navigate('/');\r\n        } catch (error) {\r\n            console.error('Error creating post:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <label>\r\n                    Name:\r\n                    <input\r\n                        type=\"text\"\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                        required\r\n                    />\r\n                </label>\r\n            </div>\r\n            <div>\r\n                <label>\r\n                    Price:\r\n                    <input\r\n                        type=\"number\"\r\n                        value={price}\r\n                        onChange={(e) => setPrice(e.target.value)}\r\n                        required\r\n                    />\r\n                </label>\r\n            </div>\r\n            <div>\r\n                <label>\r\n                    Stock:\r\n                    <input\r\n                        type=\"number\"\r\n                        value={stock}\r\n                        onChange={(e) => setStock(e.target.value)}\r\n                        required\r\n                    />\r\n                </label>\r\n            </div>\r\n            <div>\r\n                <label>\r\n                    Description:\r\n                    <textarea\r\n                        value={description}\r\n                        onChange={(e) => setDescription(e.target.value)}\r\n                        required\r\n                    />\r\n                </label>\r\n            </div>\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default CreatePostPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction PostListPage(){\r\n    const [Product, setProducts] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [size] = useState(10); // 한 페이지에 보여줄 제품 수\r\n    useEffect(() => {\r\n        axios.get('/api/posts')\r\n            .then(response =>{\r\n                setProducts(response.data.content);\r\n\r\n            })\r\n\r\n            .catch(error => console.log(error))\r\n        },[page, size]);\r\n\r\n\r\n    const handlePreviousPage = () => {\r\n        if (page > 0) {\r\n            setPage(page - 1);\r\n        }\r\n    };\r\n\r\n    const handleNextPage = () => {\r\n        if (page < totalPages - 1) {\r\n            setPage(page + 1);\r\n        }\r\n    };\r\n\r\n    const handlePageChange = (pageNumber) => {\r\n        setPage(pageNumber); // 페이지 상태 업데이트\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Product</h1>\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th>ID</th>\r\n                    <th>Name</th>\r\n                    <th>Price</th>\r\n                    <th>Stock</th>\r\n                    <th>Description</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {Product.map((product) => (\r\n                    <tr key={product.id}>\r\n                        <td>{product.id}</td>\r\n                        <td>{product.name}</td>\r\n                        <td>{product.price}</td>\r\n                        <td>{product.stock}</td>\r\n                        <td>{product.description}</td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n            <div>\r\n                <button onClick={handlePreviousPage} disabled={page === 0}>\r\n                    Previous\r\n                </button>\r\n                <span> Page {page + 1} of {totalPages} </span>\r\n                <button onClick={handleNextPage} disabled={page === totalPages - 1}>\r\n                    Next\r\n                </button>\r\n                <div>\r\n                    {/* 페이지 번호 버튼 생성 */}\r\n                    {Array.from({length: totalPages}, (_, index) => (\r\n                        <button\r\n                            key={index}\r\n                            onClick={() => handlePageChange(index)} // 페이지 변경 함수 호출\r\n                            disabled={index === page} // 현재 페이지는 비활성화\r\n                            style={{margin: '0 5px'}} // 버튼 간격 조정\r\n                        >\r\n                            {index + 1} {/* 페이지 번호 표시 */}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PostListPage;\r\n","// src/main/frontend/src/App.js\r\n\r\nimport React  from 'react';\r\nimport axios from 'axios';\r\nimport {BrowserRouter as Router, Link, Route, Routes} from 'react-router-dom';\r\nimport CreateProduct from \"./Components/CreateProduct\";\r\nimport PostListPage from \"./Components/PostListPage\";\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <Router>\r\n            <Routes>\r\n                <Route path={\"/posts\"} element={<PostListPage/>}/>\r\n                <Route path={\"/regist\"} element={<CreateProduct/>}/>\r\n            </Routes>\r\n            <br/>\r\n            <Link to={'/regist'}>글작성</Link>\r\n            <Link to={'/posts'}>목록보기</Link>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n          <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}